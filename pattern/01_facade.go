package pattern

/*
	Реализовать паттерн «фасад».
Объяснить применимость паттерна, его плюсы и минусы,а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Facade_pattern

Паттерн Фасад используется, когда:
- есть сложная система, работу с которой нужно упростить;
- хочется уменьшить количество зависимостей между клиентом и сложной системой;
- требуется разбить сложную систему на компоненты — применение паттерна к каждому компоненту упростит взаимодействие между ними.

Плюсы:
- Изолирует клиентов от поведения сложной системы

Минусы:
- Сам интерфейс фасада (или его реализация) может стать супер - объектом.
Супер объект - описывающий объект, который хранит в себе «слишком много» или делает «слишком много».

Примеры:
- Есть структуры Банк, Карта пользователя, Товар, Магазин, к примеру метод sell() у самого магазина может являться фасадом, предоставляющим
обращение к подсистемам -> к карте пользователя (узнать ее данные), к банку (сверить карту пользователя, баланс), к Товару (узнать остаток на складе) и т.д.
- Есть фреймворк, позволяющий заниматься конвертацией видео, но его использование крайне неудобно и запутанно, можно создать фасад - метод convertVideo(),
который будет обращаться к структурам, которые к примеру занимаются аудио, получением файла видео, декодированием видео и т.д. И данный метод предоставить в
качестве использования системы.

Мой пример: заказ пиццы на сайте.
*/

import "fmt"

// Pizza — сложная система с простым интерфейсом.
type Pizza struct {
	site     Site
	kitchen  Kitchen
	delivery Delivery
}

// Site отвечает за получение заказа на сайте.
type Site struct {
}

func (s *Site) GetOrder() {
	fmt.Println("Оформляем заказ.")
}

func (s *Site) RedirectOrder() {
	fmt.Println("Отправляем заказ на кухню.")
}

func (s *Site) CloseOrder() {
	fmt.Println("Заказ выполнен.")
}

// Kitchen готовит пиццу.
type Kitchen struct {
}

func (k *Kitchen) CookPizza() {
	fmt.Println("Готовим пиццу.")
}

// Delivery занимается доставкой пиццы.
type Delivery struct {
}

func (d *Delivery) SearchCourier() {
	fmt.Println("Ищем курьера.")
}

func (d *Delivery) DeliverPizza() {
	fmt.Println("Доставляем пиццу.")
}

func (d *Delivery) GetPayment() {
	fmt.Println("Получаем оплату.")
}

// StartOrder — метод для заказа пиццы.
func (p *Pizza) StartOrder() {
	p.site.GetOrder()
	p.site.RedirectOrder()
	p.kitchen.CookPizza()
	p.delivery.SearchCourier()
	p.delivery.DeliverPizza()
}

// FinishOrder — выполнение заказа.
func (p *Pizza) FinishOrder() {
	p.delivery.GetPayment()
	p.site.CloseOrder()
}

func mainFacade() {
	pizza := &Pizza{}

	pizza.StartOrder()
	pizza.FinishOrder()
}
